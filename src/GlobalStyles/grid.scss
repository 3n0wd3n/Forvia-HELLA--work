.grid-container {
	-ms-display: grid;
	display: grid;
	grid-auto-rows: min-content;

	@media only screen and (min-width: $max-content-mobile-min-width) {
		-ms-grid-template-columns: repeat($grid-column-mobile-max, 1fr);
		grid-template-columns: repeat($grid-column-mobile-max, 1fr);
		-ms-grid-column-gap: $grid-mobile-gap;
		grid-column-gap: $grid-mobile-gap;
	}

	@media only screen and (min-width: $max-content-tablet-width) {
		-ms-grid-template-columns: repeat($grid-column-tablet-max, 1fr);
		grid-template-columns: repeat($grid-column-tablet-max, 1fr);
		-ms-grid-column-gap: $grid-gap;
		grid-column-gap: $grid-gap;
	}

	@media only screen and (min-width: $max-content-width) {
		-ms-grid-template-columns: repeat($grid-column-max, 1fr);
		grid-template-columns: repeat($grid-column-max, 1fr);
		-ms-grid-column-gap: $grid-gap;
		grid-column-gap: $grid-gap;
	}

	.nested-grid {
		padding: $grid-gap;
	}

	.secondary-nested-grid {
		padding: $grid-gap;
	}

	.main-section {
		-ms-grid-row: span 3;
		grid-row: span 3;
	}

	.grid-row-xs {
		margin-bottom: $grid-row-xs-mobile;

		@media only screen and (min-width: $max-content-tablet-width) {
			margin-bottom: $grid-row-xs;
		}
	}

	.grid-row-sm {
		margin-bottom: $grid-row-sm-mobile;

		@media only screen and (min-width: $max-content-tablet-width) {
			margin-bottom: $grid-row-sm;
		}
	}

	.grid-row-md {
		margin-bottom: $grid-row-md-mobile;

		@media only screen and (min-width: $max-content-tablet-width) {
			margin-bottom: $grid-row-md;
		}
	}

	/*IN ORDER FOR THIS TO WORK, ALL ELEMENTS MUST HAVE A DEFINED WIDTH AND HEIGHT*/
	@each $type in $grid-self-type {
		.col-xs-justify-items-#{$type} {
			-ms-justify-items: $type;
			justify-items: $type;
		}
	}

	/*IN ORDER FOR THIS TO WORK, ALL ELEMENTS MUST HAVE A DEFINED WIDTH AND HEIGHT*/
	@each $type in $grid-self-type {
		.col-xs-align-items-#{$type} {
			-ms-align-items: $type;
			align-items: $type;
		}
	}

	/*IN ORDER FOR THIS TO WORK, ALL ELEMENTS MUST HAVE A DEFINED WIDTH AND HEIGHT*/
	@each $type in $grid-self-type {
		.col-xs-justify-content-#{$type} {
			-ms-justify-content: $type;
			justify-content: $type;
		}
	}

	@each $space-type in $grid-content-space {
		.col-xs-justify-content-#{$space-type} {
			-ms-justify-content: $space-type;
			justify-content: $space-type;
		}
	}

	/*IN ORDER FOR THIS TO WORK, ALL ELEMENTS MUST HAVE A DEFINED WIDTH AND HEIGHT*/
	@each $type in $grid-self-type {
		.col-xs-align-content-#{$type} {
			-ms-align-content: $type;
			align-content: $type;
		}
	}

	@each $space-type in $grid-content-space {
		.col-xs-align-content-#{$space-type} {
			-ms-align-content: $space-type;
			align-content: $space-type;
		}
	}

	.col-xs-grid-auto-flow-row {
		-ms-align-content: center;
		grid-auto-flow: row;
	}
	.col-xs-grid-auto-flow-column {
		-ms-align-content: stretch;
		grid-auto-flow: column;
	}
	.col-xs-grid-auto-flow-dense {
		-ms-align-content: space-around;
		grid-auto-flow: dense;
	}

	@for $i from 1 through $grid-column-mobile-max {
		.col-xs-#{$i} {
			-ms-grid-column-end: span $i;
			grid-column-end: span $i;
		}
	}

	@for $i from 2 through $grid-column-mobile-max {
		.col-xs-offset-#{$i} {
			-ms-grid-column-start: $i;
			grid-column-start: $i;
		}
	}

	@each $type in $grid-self-type {
		.col-xs-justify-self-#{$type} {
			-ms-justify-self: $type;
			justify-self: $type;
		}
	}

	@each $type in $grid-self-type {
		.col-xs-align-self-#{$type} {
			-ms-justify-self: $type;
			align-self: $type;
		}
	}

	@media only screen and (min-width: $max-content-tablet-width) {
		/*IN ORDER FOR THIS TO WORK, ALL ELEMENTS MUST HAVE A DEFINED WIDTH AND HEIGHT*/
		@each $type in $grid-self-type {
			.col-sm-justify-items-#{$type} {
				-ms-justify-items: $type;
				justify-items: $type;
			}
		}

		/*IN ORDER FOR THIS TO WORK, ALL ELEMENTS MUST HAVE A DEFINED WIDTH AND HEIGHT*/
		@each $type in $grid-self-type {
			.col-sm-align-items-#{$type} {
				-ms-align-items: $type;
				align-items: $type;
			}
		}

		/*IN ORDER FOR THIS TO WORK, ALL ELEMENTS MUST HAVE A DEFINED WIDTH AND HEIGHT*/
		@each $type in $grid-self-type {
			.col-sm-justify-content-#{$type} {
				-ms-justify-content: $type;
				justify-content: $type;
			}
		}

		@each $space-type in $grid-content-space {
			.col-sm-justify-content-#{$space-type} {
				-ms-justify-content: $space-type;
				justify-content: $space-type;
			}
		}

		/*IN ORDER FOR THIS TO WORK, ALL ELEMENTS MUST HAVE A DEFINED WIDTH AND HEIGHT*/
		@each $type in $grid-self-type {
			.col-sm-align-content-#{$type} {
				-ms-align-content: $type;
				align-content: $type;
			}
		}

		@each $space-type in $grid-content-space {
			.col-sm-align-content-#{$space-type} {
				-ms-align-content: $space-type;
				align-content: $space-type;
			}
		}

		.col-sm-grid-auto-flow-row {
			-ms-align-content: center;
			grid-auto-flow: row;
		}
		.col-sm-grid-auto-flow-column {
			-ms-align-content: stretch;
			grid-auto-flow: column;
		}
		.col-sm-grid-auto-flow-dense {
			-ms-align-content: space-around;
			grid-auto-flow: dense;
		}

		@for $i from 1 through $grid-column-tablet-max {
			.col-sm-#{$i} {
				-ms-grid-column-end: span $i;
				grid-column-end: span $i;
			}
		}

		@for $i from 2 through $grid-column-tablet-max {
			.col-sm-offset-#{$i} {
				-ms-grid-column-end: span $i;
				grid-column-end: span $i;
			}
		}

		@each $type in $grid-self-type {
			.col-sm-justify-self-#{$type} {
				-ms-justify-self: $type;
				justify-self: $type;
			}
		}

		@each $type in $grid-self-type {
			.col-sm-align-self-#{$type} {
				-ms-justify-self: $type;
				align-self: $type;
			}
		}
	}

	@media only screen and (min-width: $max-content-width) {
		/*IN ORDER FOR THIS TO WORK, ALL ELEMENTS MUST HAVE A DEFINED WIDTH AND HEIGHT*/
		@each $type in $grid-self-type {
			.col-md-justify-items-#{$type} {
				-ms-justify-items: $type;
				justify-items: $type;
			}
		}

		/*IN ORDER FOR THIS TO WORK, ALL ELEMENTS MUST HAVE A DEFINED WIDTH AND HEIGHT*/
		@each $type in $grid-self-type {
			.col-md-align-items-#{$type} {
				-ms-align-items: $type;
				align-items: $type;
			}
		}

		/*IN ORDER FOR THIS TO WORK, ALL ELEMENTS MUST HAVE A DEFINED WIDTH AND HEIGHT*/
		@each $type in $grid-self-type {
			.col-md-justify-content-#{$type} {
				-ms-justify-content: $type;
				justify-content: $type;
			}
		}

		@each $space-type in $grid-content-space {
			.col-md-justify-content-#{$space-type} {
				-ms-justify-content: $space-type;
				justify-content: $space-type;
			}
		}

		/*IN ORDER FOR THIS TO WORK, ALL ELEMENTS MUST HAVE A DEFINED WIDTH AND HEIGHT*/
		@each $type in $grid-self-type {
			.col-md-align-content-#{$type} {
				-ms-align-content: $type;
				align-content: $type;
			}
		}

		@each $space-type in $grid-content-space {
			.col-md-align-content-#{$space-type} {
				-ms-align-content: $space-type;
				align-content: $space-type;
			}
		}

		.col-md-grid-auto-flow-row {
			-ms-align-content: center;
			grid-auto-flow: row;
		}
		.col-md-grid-auto-flow-column {
			-ms-align-content: stretch;
			grid-auto-flow: column;
		}
		.col-md-grid-auto-flow-dense {
			-ms-align-content: space-around;
			grid-auto-flow: dense;
		}

		@for $i from 1 through $grid-column-max {
			.col-md-#{$i} {
				-ms-grid-column-end: span $i;
				grid-column-end: span $i;
			}
		}

		@for $i from 2 through $grid-column-max {
			.col-md-offset-#{$i} {
				-ms-grid-column-end: span $i;
				grid-column-end: span $i;
			}
		}

		@each $type in $grid-self-type {
			.col-md-justify-self-#{$type} {
				-ms-justify-self: $type;
				justify-self: $type;
			}
		}

		@each $type in $grid-self-type {
			.col-md-align-self-#{$type} {
				-ms-justify-self: $type;
				align-self: $type;
			}
		}
	}

	@media only screen and (min-width: $max-content-xl-width) {
		/*IN ORDER FOR THIS TO WORK, ALL ELEMENTS MUST HAVE A DEFINED WIDTH AND HEIGHT*/
		@each $type in $grid-self-type {
			.col-lg-justify-items#{$type} {
				-ms-justify-items: $type;
				justify-items: $type;
			}
		}

		/*IN ORDER FOR THIS TO WORK, ALL ELEMENTS MUST HAVE A DEFINED WIDTH AND HEIGHT*/
		@each $type in $grid-self-type {
			.col-lg-align-items-#{$type} {
				-ms-align-items: $type;
				align-items: $type;
			}
		}

		/*IN ORDER FOR THIS TO WORK, ALL ELEMENTS MUST HAVE A DEFINED WIDTH AND HEIGHT*/
		@each $type in $grid-self-type {
			.col-lg-justify-content-#{$type} {
				-ms-justify-content: $type;
				justify-content: $type;
			}
		}

		@each $space-type in $grid-content-space {
			.col-lg-justify-content-#{$space-type} {
				-ms-justify-content: $space-type;
				justify-content: $space-type;
			}
		}

		/*IN ORDER FOR THIS TO WORK, ALL ELEMENTS MUST HAVE A DEFINED WIDTH AND HEIGHT*/
		@each $type in $grid-self-type {
			.col-lg-align-content-#{$type} {
				-ms-align-content: $type;
				align-content: $type;
			}
		}

		@each $space-type in $grid-content-space {
			.col-lg-align-content-s#{$space-type} {
				-ms-align-content: $space-type;
				align-content: $space-type;
			}
		}

		.col-lg-grid-auto-flow-row {
			-ms-align-content: center;
			grid-auto-flow: row;
		}
		.col-lg-grid-auto-flow-column {
			-ms-align-content: stretch;
			grid-auto-flow: column;
		}
		.col-lg-grid-auto-flow-dense {
			-ms-align-content: space-around;
			grid-auto-flow: dense;
		}

		@for $i from 1 through $grid-column-max {
			.col-lg-#{$i} {
				-ms-grid-column-end: span $i;
				grid-column-end: span $i;
			}
		}

		@for $i from 2 through $grid-column-max {
			.col-lg-offset-#{$i} {
				-ms-grid-column-end: span $i;
				grid-column-end: span $i;
			}
		}

		@each $type in $grid-self-type {
			.col-lg-justify-self-#{$type} {
				-ms-justify-self: $type;
				justify-self: $type;
			}
		}

		@each $type in $grid-self-type {
			.col-lg-align-self-#{$type} {
				-ms-justify-self: $type;
				align-self: $type;
			}
		}
	}
}
